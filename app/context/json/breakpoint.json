{
    "breakpoint.js": "\n    const defaultValue = {};\n\n    const BreakpointContext = createContext(defaultValue);\n    \n    const BreakpointProvider = ({ children, queries }) => {\n      const [queryMatch, setQueryMatch] = useState({});\n    \n      useEffect(() => {\n        const mediaQueryLists = {};\n        const keys = Object.keys(queries);\n        let isAttached = false;\n    \n        const handleQueryListener = () => {\n          const updMatches = keys.reduce((acc, media) => {\n            acc[media] = !!(\n              mediaQueryLists[media] && mediaQueryLists[media].matches\n            );\n            return acc;\n          }, {});\n          setQueryMatch(updMatches);\n        };\n    \n        if (window && window.matchMedia) {\n          const matches = {};\n          keys.forEach(media => {\n            if (typeof queries[media] === 'string') {\n              mediaQueryLists[media] = window.matchMedia(queries[media]);\n              matches[media] = mediaQueryLists[media].matches;\n            } else {\n              matches[media] = false;\n            }\n          });\n          setQueryMatch(matches);\n          isAttached = true;\n          keys.forEach(media => {\n            if (typeof queries[media] === 'string') {\n              mediaQueryLists[media].addListener(handleQueryListener);\n            }\n          });\n        }\n    \n        return () => {\n          if (isAttached) {\n            keys.forEach(media => {\n              if (typeof queries[media] === 'string') {\n                mediaQueryLists[media].removeListener(handleQueryListener);\n              }\n            });\n          }\n        };\n      }, [queries]);\n    \n      return (\n        <BreakpointContext.Provider value={queryMatch}>\n          {children}\n        </BreakpointContext.Provider>\n      );\n    };\n    \n    function useBreakpoint() {\n      const context = useContext(BreakpointContext);\n      if (context === defaultValue) {\n        throw new Error('useBreakpoint must be used within BreakpointProvider');\n      }\n      return context;\n    }\n    export { useBreakpoint, BreakpointProvider };\n    "
  }